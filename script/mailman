#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"
require "mailman"
require "ruby-debug"

#ENV["RAILS_ENV"] ||= "development"

require File.dirname(__FILE__) + "/../config/environment"

Mailman::Application.run do
  default do
    begin
      # TODO проверить работосопособность. Перенес в after_commit callback
      #Thread.current[:pinged] = false

      message.from.each do |from|

        email_address = EmailAddress.find_or_initialize_by_email_address(from)
   
        if email_address.user.blank?
          user = email_address.build_user
          user.creation_reason = :email
          user.save
        end

        debugger
        message[:from].addrs.each do |addr|
          addr.decoded
          name = Name.new(:name => addr.display_name)
          name.creation_reason = :email
          email_address.user.names << name


          email_address.save

          message.subject.to_s

          email = Email.new(
            :email_address => email_address,
            :from => message.from.to_s, 
            :to => message.to.to_s,
            :subject => message.subject.to_s,
            :body => message.body.to_s,
            :cc_addrs => message.cc_addrs,
            :bcc_addrs => message.bcc_addrs,
            :bcc => message.bcc,
            :cc => message.cc,
            :resent_bcc => message.resent_bcc,
            :resent_cc => message.resent_cc,
            :is_multipart => message.multipart?,
            :parts_length => message.parts.length,
            :date => message.date,
            :message_id => message.message_id,
            :name => Base64.encode64( message[:from].decoded ),
            :from_addrs => message.from_addrs, 
            :content_types => message.parts.map {|p| p.content_type}.join(', '),
            :classes => message.parts.map {|p| p.class}.join(', '),
            #:return_path => message.return_path, 
            :return_path => Base64.encode64( message[:from].decoded ),
            :in_reply_to => message.in_reply_to,
            :to_addrs => message.to_addrs, 
            :html_part => Base64.encode64( (message.html_part ? message.html_part.body.decoded : nil).to_s ),
            :text_part => Base64.encode64( (message.multipart? ? (message.text_part ? message.text_part.body.decoded : nil) : message.body.decoded).to_s )
          )

          email_address.save

          message.attachments.each do |attachment|
            file = StringIO.new(attachment.decoded)
            file.class.class_eval {attr_accessor :original_filename, :content_type}
            file.original_filename = attachment.filename
            file.content_type = attachment.mime_type
            attachment = Attachment.new(:attachment => file)
            email.attachments << attachment
            attachment.save
            email.save
          end


         # mail.attachments.each do | attachment |
         #   # Attachments is an AttachmentsList object containing a
         #   # number of Part objects
         #   if (attachment.content_type.start_with?('image/'))
         #     # extracting images for example...
         #     filename = attachment.filename
         #     begin
         #       File.open(images_dir + filename, "w+b", 0644) {|f| f.write attachment.body.decoded}
         #     rescue Exception => e
         #       puts "Unable to save data for #{filename} because #{e.message}"
         #     end
         #   end
         # end

          email.save

          debugger
          EmailMailer.welcome_email({:name => addr.display_name, :email => addr.address, :login => "fake"}).deliver

          
          puts Time.zone.now

          #Ticket.receive_mail(message)


        end

      end

      rescue Exception => e
        Mailman.logger.error "Exception occurred while receiving message:\n#{message}"
        Mailman.logger.error [e, *e.backtrace].join("\n")
      end

  end
end
